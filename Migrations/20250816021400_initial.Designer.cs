// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PLCDataCollector.Model.Classes;

#nullable disable

namespace PLCDataCollector.Migrations
{
    [DbContext(typeof(PlcDataContext))]
    [Migration("20250816021400_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.19");

            modelBuilder.Entity("PLCDataCollector.Model.Classes.AlarmDefinitions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlarmType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Threshold")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("TagId");

                    b.ToTable("AlarmDefinitions");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.AlarmHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("AcknowledgedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AlarmDefinitionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ClearedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("TagValue")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("TriggeredAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlarmDefinitionId");

                    b.HasIndex("LineId");

                    b.ToTable("AlarmHistory");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.ConfigurationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LineId", "SettingKey")
                        .IsUnique();

                    b.ToTable("ConfigurationSettings");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.Downtime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("ShiftId");

                    b.ToTable("Downtimes");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.LineDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data_Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LineType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PLC")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LineId")
                        .IsUnique();

                    b.ToTable("LineDetails");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.MaintenanceLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Technician")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("MaintenanceLogs");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.PlcData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentCount")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CycleTime")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SyncStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LineId", "SyncStatus");

                    b.ToTable("PlcData");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.ProductionData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CycleTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Efficiency")
                        .HasColumnType("TEXT");

                    b.Property<int>("GoodQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlannedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScrapQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("ShiftId");

                    b.ToTable("ProductionData");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.ProductionSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlannedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("ShiftId");

                    b.ToTable("ProductionSchedules");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.QualityChecks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CheckType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CheckedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CheckedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductionDataId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShiftsId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Standard")
                        .HasColumnType("REAL");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("ProductionDataId");

                    b.HasIndex("ShiftsId");

                    b.ToTable("QualityChecks");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.Shifts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ScanRate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LineId", "TagName")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.TagHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("TagId");

                    b.ToTable("TagHistory");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.AlarmDefinitions", b =>
                {
                    b.HasOne("PLCDataCollector.Model.Classes.LineDetail", "LineDetail")
                        .WithMany("AlarmDefinitions")
                        .HasForeignKey("LineId")
                        .HasPrincipalKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PLCDataCollector.Model.Classes.Tag", "Tag")
                        .WithMany("AlarmDefinitions")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineDetail");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.AlarmHistory", b =>
                {
                    b.HasOne("PLCDataCollector.Model.Classes.AlarmDefinitions", "AlarmDefinitions")
                        .WithMany("AlarmHistories")
                        .HasForeignKey("AlarmDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PLCDataCollector.Model.Classes.LineDetail", "LineDetail")
                        .WithMany("AlarmHistories")
                        .HasForeignKey("LineId")
                        .HasPrincipalKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlarmDefinitions");

                    b.Navigation("LineDetail");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.ConfigurationSetting", b =>
                {
                    b.HasOne("PLCDataCollector.Model.Classes.LineDetail", "LineDetail")
                        .WithMany("ConfigurationSettings")
                        .HasForeignKey("LineId")
                        .HasPrincipalKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineDetail");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.Downtime", b =>
                {
                    b.HasOne("PLCDataCollector.Model.Classes.LineDetail", "LineDetail")
                        .WithMany("Downtimes")
                        .HasForeignKey("LineId")
                        .HasPrincipalKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PLCDataCollector.Model.Classes.Shifts", "Shifts")
                        .WithMany("Downtimes")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineDetail");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.LineDetail", b =>
                {
                    b.OwnsOne("PLCDataCollector.Model.Classes.ShiftConfigurationDetail", "ShiftConfiguration", b1 =>
                        {
                            b1.Property<int>("LineDetailId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("LineDetailId");

                            b1.ToTable("LineDetails");

                            b1.WithOwner("LineDetail")
                                .HasForeignKey("LineDetailId");

                            b1.OwnsOne("PLCDataCollector.Model.Classes.ShiftDetail", "ShiftA", b2 =>
                                {
                                    b2.Property<int>("ShiftConfigurationDetailLineDetailId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("BreakTimes")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Color")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("EndTime")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("StartTime")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("ShiftConfigurationDetailLineDetailId");

                                    b2.ToTable("LineDetails");

                                    b2.WithOwner()
                                        .HasForeignKey("ShiftConfigurationDetailLineDetailId");
                                });

                            b1.OwnsOne("PLCDataCollector.Model.Classes.ShiftDetail", "ShiftB", b2 =>
                                {
                                    b2.Property<int>("ShiftConfigurationDetailLineDetailId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("BreakTimes")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Color")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("EndTime")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("StartTime")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("ShiftConfigurationDetailLineDetailId");

                                    b2.ToTable("LineDetails");

                                    b2.WithOwner()
                                        .HasForeignKey("ShiftConfigurationDetailLineDetailId");
                                });

                            b1.OwnsOne("PLCDataCollector.Model.Classes.ShiftDetail", "ShiftC", b2 =>
                                {
                                    b2.Property<int>("ShiftConfigurationDetailLineDetailId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("BreakTimes")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Color")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("EndTime")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("StartTime")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("ShiftConfigurationDetailLineDetailId");

                                    b2.ToTable("LineDetails");

                                    b2.WithOwner()
                                        .HasForeignKey("ShiftConfigurationDetailLineDetailId");
                                });

                            b1.Navigation("LineDetail");

                            b1.Navigation("ShiftA")
                                .IsRequired();

                            b1.Navigation("ShiftB")
                                .IsRequired();

                            b1.Navigation("ShiftC")
                                .IsRequired();
                        });

                    b.Navigation("ShiftConfiguration")
                        .IsRequired();
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.MaintenanceLogs", b =>
                {
                    b.HasOne("PLCDataCollector.Model.Classes.LineDetail", "LineDetail")
                        .WithMany("MaintenanceLogs")
                        .HasForeignKey("LineId")
                        .HasPrincipalKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineDetail");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.PlcData", b =>
                {
                    b.HasOne("PLCDataCollector.Model.Classes.LineDetail", "LineDetail")
                        .WithMany("PlcData")
                        .HasForeignKey("LineId")
                        .HasPrincipalKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineDetail");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.ProductionData", b =>
                {
                    b.HasOne("PLCDataCollector.Model.Classes.LineDetail", "LineDetail")
                        .WithMany("ProductionData")
                        .HasForeignKey("LineId")
                        .HasPrincipalKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PLCDataCollector.Model.Classes.ProductionSchedule", "Schedule")
                        .WithMany("ProductionData")
                        .HasForeignKey("ScheduleId");

                    b.HasOne("PLCDataCollector.Model.Classes.Shifts", "Shift")
                        .WithMany("ProductionData")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineDetail");

                    b.Navigation("Schedule");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.ProductionSchedule", b =>
                {
                    b.HasOne("PLCDataCollector.Model.Classes.LineDetail", "LineDetail")
                        .WithMany("ProductionSchedules")
                        .HasForeignKey("LineId")
                        .HasPrincipalKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PLCDataCollector.Model.Classes.Shifts", "Shift")
                        .WithMany("ProductionSchedules")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineDetail");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.QualityChecks", b =>
                {
                    b.HasOne("PLCDataCollector.Model.Classes.LineDetail", "LineDetail")
                        .WithMany("QualityChecks")
                        .HasForeignKey("LineId")
                        .HasPrincipalKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PLCDataCollector.Model.Classes.ProductionData", "ProductionData")
                        .WithMany("QualityChecks")
                        .HasForeignKey("ProductionDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PLCDataCollector.Model.Classes.Shifts", "Shifts")
                        .WithMany("QualityChecks")
                        .HasForeignKey("ShiftsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineDetail");

                    b.Navigation("ProductionData");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.Shifts", b =>
                {
                    b.HasOne("PLCDataCollector.Model.Classes.LineDetail", "LineDetail")
                        .WithMany("Shifts")
                        .HasForeignKey("LineId")
                        .HasPrincipalKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineDetail");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.Tag", b =>
                {
                    b.HasOne("PLCDataCollector.Model.Classes.LineDetail", "LineDetail")
                        .WithMany("Tags")
                        .HasForeignKey("LineId")
                        .HasPrincipalKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineDetail");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.TagHistory", b =>
                {
                    b.HasOne("PLCDataCollector.Model.Classes.LineDetail", "LineDetail")
                        .WithMany("TagHistories")
                        .HasForeignKey("LineId")
                        .HasPrincipalKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PLCDataCollector.Model.Classes.Tag", "Tag")
                        .WithMany("TagHistories")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineDetail");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.AlarmDefinitions", b =>
                {
                    b.Navigation("AlarmHistories");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.LineDetail", b =>
                {
                    b.Navigation("AlarmDefinitions");

                    b.Navigation("AlarmHistories");

                    b.Navigation("ConfigurationSettings");

                    b.Navigation("Downtimes");

                    b.Navigation("MaintenanceLogs");

                    b.Navigation("PlcData");

                    b.Navigation("ProductionData");

                    b.Navigation("ProductionSchedules");

                    b.Navigation("QualityChecks");

                    b.Navigation("Shifts");

                    b.Navigation("TagHistories");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.ProductionData", b =>
                {
                    b.Navigation("QualityChecks");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.ProductionSchedule", b =>
                {
                    b.Navigation("ProductionData");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.Shifts", b =>
                {
                    b.Navigation("Downtimes");

                    b.Navigation("ProductionData");

                    b.Navigation("ProductionSchedules");

                    b.Navigation("QualityChecks");
                });

            modelBuilder.Entity("PLCDataCollector.Model.Classes.Tag", b =>
                {
                    b.Navigation("AlarmDefinitions");

                    b.Navigation("TagHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
